Index: lib/session-file-helpers.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- lib/session-file-helpers.js	(revision 09ed8516ec1e53ff15e84b3a7622c922d7535604)
+++ lib/session-file-helpers.js	(revision )
@@ -24,7 +24,8 @@
       minTimeout: options.minTimeout || 50,
       maxTimeout: options.maxTimeout || 100,
       filePattern: /\.json$/,
-      reapInterval: options.reapInterval || 3600
+      reapInterval: options.reapInterval || 3600,
+      reapWorker: options.reapWorker || true
     };
   },
 
@@ -42,13 +43,16 @@
     });
   },
 
-  scheduleReapWorker: function (options) {
+  scheduleReap: function (options) {
     if (options.reapInterval !== -1) {
       setInterval(function () {
-        console.log("[session-file-store] Starting reap worker thread");
+        if (options.reapWorker) {
+          console.log('[session-file-store] Starting reap worker thread');
-        childProcess.execFile('reap-worker.js', [options.path, options.ttl]);
+          childProcess.execFile('reap-worker.js', [options.path, options.ttl]);
-
-        helpers.reap();
+        } else {
+          console.log('[session-file-store] Deleting expired sessions');
+          helpers.reap(options);
+        }
       }, options.reapInterval * 1000);
     }
   },
@@ -91,7 +95,7 @@
           json = JSON.parse(data);
         } catch (err) {
           if (operation.retry(err)) {
-            console.log("[session-file-store] will retry, error on last attempt: " + err);
+            console.log('[session-file-store] will retry, error on last attempt: ' + err);
           } else {
             callback(err);
           }
\ No newline at end of file
Index: package.json
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- package.json	(revision 09ed8516ec1e53ff15e84b3a7622c922d7535604)
+++ package.json	(revision )
@@ -1,6 +1,6 @@
 {
   "name": "session-file-store",
-  "version": "0.0.3",
+  "version": "0.0.4",
   "description": "Session file store is a provision for storing session data in the session file",
   "main": "index.js",
   "private": false,
@@ -14,7 +14,6 @@
     "store"
   ],
   "author": {
-    "name": "Valery Barysok",
     "name": "Igor Svehla"
   },
   "licenses": [
@@ -28,10 +27,10 @@
   },
   "homepage": "https://github.com/valery-barysok/session-file-store",
   "scripts": {
-    "test": "mocha --reporter spec --bail --check-leaks test/",
-    "test-ci": "istanbul cover node_modules/mocha/bin/_mocha --report lcovonly -- --reporter spec --check-leaks test/",
-    "test-cov": "istanbul cover node_modules/mocha/bin/_mocha -- --reporter dot --check-leaks test/",
-    "test-tap": "mocha --reporter tap --check-leaks test/"
+    "test": "node_modules/.bin/mocha --reporter spec --bail --check-leaks test/",
+    "test-ci": "node_modules/.bin/istanbul cover node_modules/mocha/bin/_mocha --report lcovonly -- --reporter spec --check-leaks test/",
+    "test-cov": "node_modules/.bin/istanbul cover node_modules/mocha/bin/_mocha -- --reporter dot --check-leaks test/",
+    "test-tap": "node_modules/.bin/mocha --reporter tap --check-leaks test/"
   },
   "engines": {
     "node": ">= 0.10.0"
@@ -41,7 +40,8 @@
     "retry": "^0.6.1"
   },
   "devDependencies": {
-    "chai": "^2.3.0",
+    "chai": "^1.10.0",
+    "chai-fs": "^0.1.0",
     "coveralls": "^2.11.2",
     "istanbul": "^0.3.13",
     "mocha": "^2.2.4"
Index: test/helpers.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- test/helpers.js	(revision 09ed8516ec1e53ff15e84b3a7622c922d7535604)
+++ test/helpers.js	(revision )
@@ -2,25 +2,73 @@
   chai = require('chai'),
   expect = chai.expect,
   fs = require('graceful-fs'),
+  os = require('os'),
   path = require('path');
 
-describe("helpers", function () {
+chai.use(require('chai-fs'));
+
+describe('helpers', function () {
+  var tmp = path.normalize(os.tmpdir());
+
   var options = helpers.defaults();
-  options.path = path.join('test', options.path);
+//  options.path = path.join(tmp, options.path);
 
-  describe("#sessionId", function () {
-    it("should return session id when file name is passed", function () {
-      var sessionId = helpers.sessionId("id.json");
-      expect(sessionId).to.be.a("string");
-      expect(sessionId).is.equal("id");
+  describe('#defaults', function () {
+    it('should return valid defaults', function () {
+      var options = helpers.defaults();
+      expect(options).to.exist;
+      expect(options).to.have.property('path').that.is.a('string');
+      expect(options).to.have.property('ttl').that.be.a('number');
+      expect(options).to.have.property('retries').that.be.a('number').and.least(0);
+      expect(options).to.have.property('factor').that.be.a('number').and.gt(0);
+      expect(options).to.have.property('minTimeout').that.be.a('number').and.gt(0);
+      expect(options).to.have.property('maxTimeout').that.be.a('number').and.least(options.minTimeout);
+      expect(options).to.have.property('filePattern').that.is.instanceOf(RegExp);
+      expect(options).to.have.property('reapInterval').that.be.a('number');
+      expect(options).to.have.property('reapWorker').that.be.a('boolean');
     });
   });
 
-  describe("#sessionPath", function () {
-    it("should return session file path when base path and session id are passed", function () {
-      var sessionPath = helpers.sessionPath(options.path, "id");
-      expect(sessionPath).to.be.a("string");
-      expect(sessionPath).is.equal(path.normalize("test/sessions/id.json"));
+  describe('#sessionId', function () {
+    it('should return session id when valid json file name is passed', function () {
+      var sessionId = helpers.sessionId('id.json');
+      expect(sessionId).is.equal('id');
+    });
+
+    it('should return no session id when invalid file name is passed', function () {
+      var sessionId = helpers.sessionId('id');
+      expect(sessionId).is.equal('');
+    });
+  });
+
+  describe('#sessionPath', function () {
+    it('should return session file path when base path and session id are passed', function () {
+      var sessionPath = helpers.sessionPath(options.path, 'id');
+      expect(sessionPath).to.be.a('string');
+      expect(sessionPath).is.equal(path.normalize('sessions/id.json'));
+    });
+  });
+
+  describe('#length', function () {
+
+    it('should throw exception when no folder exists', function (done) {
+      helpers.length(options, function (err, result) {
+        expect(err).to.be.ok;
+        expect(err).is.an('object');
+        expect(err).to.have.property('code').is.equal('ENOENT');
+        done();
+      });
+    });
+
+    describe('#createPathIfRequired', function () {
+      it('should create sessions directory', function () {
+        //expect(options.path).to.not.be.a.directory('blah');
+        //helpers.createPathIfRequired(options);
+        //expect(options.path).to.be.a.directory('blah');
+        //var sessionPath = helpers.sessionPath(options.path, 'id');
+        //expect(sessionPath).to.be.a('string');
+        //expect(sessionPath).is.equal(path.normalize('test/sessions/id.json'));
+      });
     });
   });
 });
Index: lib/session-file-store.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- lib/session-file-store.js	(revision 09ed8516ec1e53ff15e84b3a7622c922d7535604)
+++ lib/session-file-store.js	(revision )
@@ -26,7 +26,7 @@
 
     self.options = helpers.defaults(options);
     helpers.createPathIfRequired(self.options);
-    helpers.scheduleReapWorker(self.options);
+    helpers.scheduleReap(self.options);
   }
 
   /**
Index: README.md
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- README.md	(revision 09ed8516ec1e53ff15e84b3a7622c922d7535604)
+++ README.md	(revision )
@@ -22,13 +22,14 @@
 
 ## Options
 
-    - `path`       The directory where the session files will be stored. Defaults to `./sessions`
+  - `path`         The directory where the session files will be stored. Defaults to `./sessions`
-    - `ttl`        Time to live in seconds. Defaults to 3600
+  - `ttl`          Time to live in seconds. Defaults to 3600
-    - `retries`    The number of retries to get session data from a session file. Defaults to 5
+  - `retries`      The number of retries to get session data from a session file. Defaults to 5
-    - `factor`     Defaults to 1
+  - `factor`       Defaults to 1
-    - `minTimeout` Defaults to 50
+  - `minTimeout`   Defaults to 50
-    - `maxTimeout` Defaults to 100
+  - `maxTimeout`   Defaults to 100
-    - `reapInterval` Interval to clear expired sessions in seconds. Defaults to 1 hour
+  - `reapInterval` Interval to clear expired sessions in seconds or -1 if do not need. Defaults to 1 hour
+  - `reapWorker`   If need to do clearing of expired sessions in a distinct worker process. Defaults to true
 
 ## Usage
 
\ No newline at end of file
Index: lib/reap-worker.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- lib/reap-worker.js	(revision 09ed8516ec1e53ff15e84b3a7622c922d7535604)
+++ lib/reap-worker.js	(revision )
@@ -6,9 +6,9 @@
 });
 
 if (options.path) {
-  console.log("[session-file-store:worker] Deleting expired sessions");
+  console.log('[session-file-store:worker] Deleting expired sessions');
   helpers.reap(options);
 } else {
-  console.log("[session-file-store:worker] Reap worker started with invalid path");
+  console.log('[session-file-store:worker] Reap worker started with invalid path');
   process.exit(1);
 }
